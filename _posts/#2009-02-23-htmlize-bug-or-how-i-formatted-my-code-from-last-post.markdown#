---
layout: post
title: Htmlize bug or How I formatted my code from last post
date: 2009-02-23 22:50:19.000000000 -08:00
tags:
  - emacs
---
I recently stubled across <a title="Htmlize your erland code buffer" href="http://ruslanspivak.com/2007/08/18/htmlize-your-erlang-code-buffer/">this post</a> where Ruslan outlines a great custom Emacs function for slightly editing htmlize output for blog posts. The only problem is the current htmlize doesn't work with <a title="Debian Emacs Snapshot" href="http://emacs.orebokech.com/">cvs Emacs</a> which I am using.

Luckily I found the <a title="Htmlize Bug in Emacs CVS" href="http://emacsbugs.donarmstrong.com/cgi-bin/bugreport.cgi?bug=648">bug report</a>. Hopefully this gets in to htmlize soon. For now my solution is to download <a title="Htmlize" href="https://vgoulet.act.ulaval.ca/svn/emacs-modified/windows/trunk/htmlize.el">htmlize.el</a> and change the line that the bug report mentions:
<pre style="color: #bebebe; background-color: #262626; padding: 5px; overflow: auto;">      for f = face then (face-attribute f <span style="color: #7fffd4;">:inherit</span>)</pre>
becomes
<pre style="color: #bebebe; background-color: #262626; padding: 5px; overflow: auto;">      for f = face then (or (face-attribute f <span style="color: #7fffd4;">:inherit</span>) 'unspecified)</pre>
After doing this I just added a slightly edited version of Ruslan's function with a load-file command to load my custom htmlize.el (over the version included with Debian's <a title="Debian Package: emacs-goodies-el" href="http://packages.debian.org/lenny/emacs-goodies-el">emacs-goodies-el</a> package). My changes remove the font size setting, set overflow: auto and added a padding: 5px to the pre tags.
<pre style="color: #bebebe; background-color: #262626; padding: 5px; overflow: auto;"><span style="color: #add8e6;">;;; </span><span style="color: #add8e6;">Function to format buffer for a blog
</span><span style="color: #add8e6;">;;; </span><span style="color: #add8e6;">From: http://ruslanspivak.com/2007/08/18/htmlize-your-erlang-code-buffer/
</span><span style="color: #add8e6;">;;; </span><span style="color: #add8e6;">Edited to not set font size, set overflow: auto and add padding
</span>(<span style="color: #afeeee; font-weight: bold;">defun</span> <span style="color: #7fffd4; font-weight: bold;">my-htmlize-region</span> (beg end)
  <span style="color: #87cefa;">"Htmlize region and put into <pre> tag style that is left in
<body> tag plus add font-size: 8pt"</span>
  (interactive <span style="color: #87cefa;">"r"</span>)
  (<span style="color: #afeeee; font-weight: bold;">let*</span> ((buffer-faces (htmlize-faces-in-buffer))
         (face-map (htmlize-make-face-map (adjoin 'default buffer-faces)))
         (pre-tag (format
                   <span style="color: #87cefa;">"<pre style=\"%s padding: 5px; overflow: auto;\">"</span>
                   (mapconcat #'identity (htmlize-css-specs
                                          (gethash 'default face-map)) <span style="color: #87cefa;">" "</span>)))
         (htmlized-reg (htmlize-region-for-paste beg end)))
    (switch-to-buffer-other-window <span style="color: #87cefa;">"*htmlized output*"</span>)
    <span style="color: #add8e6;">;; </span><span style="color: #add8e6;">clear buffer
</span>    (kill-region (point-min) (point-max))
    <span style="color: #add8e6;">;; </span><span style="color: #add8e6;">set mode to have syntax highlighting
</span>    (nxml-mode)
    (<span style="color: #afeeee; font-weight: bold;">save-excursion</span>
      (insert htmlized-reg))
    (<span style="color: #afeeee; font-weight: bold;">while</span> (re-search-forward <span style="color: #87cefa;">"<pre>"</span> nil t)
      (replace-match pre-tag nil nil))
    (goto-char (point-min))))

(global-set-key [(f5)]
                (<span style="color: #afeeee; font-weight: bold;">lambda</span> (beg end)
                  (interactive <span style="color: #87cefa;">"r"</span>) (my-htmlize-region beg end)))</pre>
And there we go! F5 now works and htmlize's the region for quick and easy paste into wordpress!
